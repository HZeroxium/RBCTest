openapi: 3.1.0
info:
  title: Book Management API
  description: A REST API for managing a collection of books
  version: 1.0.0
  contact:
    name: API Support
    email: support@bookapi.com

servers:
  - url: https://api.bookservice.com/v1
    description: Production server
  - url: https://dev-api.bookservice.com/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Book:
      type: object
      required:
        - title
        - author
        - isbn
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the book
        title:
          type: string
          description: Title of the book
        author:
          type: string
          description: Author of the book
        isbn:
          type: string
          pattern: "^[0-9]{13}$"
          description: ISBN-13 number for the book
        publicationYear:
          type: integer
          minimum: 1000
          maximum: 9999
          description: Year the book was published
        genre:
          type: string
          enum:
            [
              fiction,
              non-fiction,
              science,
              history,
              biography,
              fantasy,
              romance,
              thriller,
            ]
        description:
          type: string
          description: A brief summary of the book
        price:
          type: number
          format: float
          minimum: 0
          description: Price of the book

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: string

    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Expiration time in seconds

paths:
  /auth/login:
    post:
      summary: Authenticate a user
      description: Exchange credentials for an access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books:
    get:
      summary: List all books
      description: Returns a paginated list of books
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: genre
          in: query
          description: Filter by book genre
          schema:
            type: string
            enum:
              [
                fiction,
                non-fiction,
                science,
                history,
                biography,
                fantasy,
                romance,
                thriller,
              ]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
                  totalItems:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new book
      description: Adds a new book to the collection
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books/{bookId}:
    get:
      summary: Get book by ID
      description: Returns a single book by its ID
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a book
      description: Updates an existing book by its ID
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a book
      description: Deletes a book by its ID
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Book deleted successfully
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books/search:
    get:
      summary: Search books
      description: Search books by title, author or ISBN
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          description: Search term
          schema:
            type: string
            minLength: 3
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
                  totalItems:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /health:
    get:
      summary: Check API health
      description: Returns the current status of the API
      tags:
        - System
      responses:
        "200":
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  version:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
